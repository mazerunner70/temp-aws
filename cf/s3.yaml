---
AWSTemplateFormatVersion: '2010-09-09'

Description: Simple S3 Bucket

Parameters:

  BucketName:
    Type: String
    Description: The name of the S3 Bucket that will hold temperature measurements

  TableName:
    Type: String
    Description: The name of the DynamoDB to create

  ListenerLambdaName:
    Type: String
    Description: Name of the lambda in 'wils-lambda-zips'

Metadata:

  AWS::CloudFormation::Interface:
    ParameterLabels:
      BucketName:
        default: S3 Bucket Name

  AWS::CloudFormation::Interface:
    ParameterLabels:
      TableName:
        default: Dynamo DB instance Name

Resources:

  DynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "timestamp"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: !Ref TableName

  S3ListenExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['logs:*']
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: S3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 'S3:GetObject'
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"
        - PolicyName: DynamoDbPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                Resource: !Sub "arn:aws:dynamodb:::table/${TableName}"
  S3ListenFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "wils-lambda-zips"
        S3Key: !Ref ListenerLambdaName

      Handler: sample.handler
      Runtime: python3.7
      Timeout: 15
      Role: !GetAtt S3ListenExecutionRole.Arn
  S3ListenFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt S3ListenFunction.Arn
      Principal: 'cloudformation.amazonaws.com'
  S3Listen:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: !Sub 'PyPlate'
      Description: Processes inline python in templates
      FunctionName: !GetAtt S3ListenFunction.Arn

  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: BucketPermission
    Properties:
      # Need to define a static BucketName due to a circular dependency with the AWS::SNS::TopicPolicy
      BucketName: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
            NoncurrentVersionExpirationInDays: 3
            Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref S3BucketLogs
        LogFilePrefix: !Sub '/logs/${BucketName}/'
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt S3ListenFunction.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: Object Storage
      VersioningConfiguration:
        Status: Enabled

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref S3ListenFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"

  S3BucketLogs:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
            Transitions:
              -
                StorageClass: GLACIER
                TransitionInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: S3 Access Logs



Outputs:

  S3Bucket:
    Value: !Ref S3Bucket
    Description: S3 Bucket for receiving new readings

  DynamoDb:
    Value: !Ref DynamoDBTable
    Description: DB for object storage

