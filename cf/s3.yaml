---
AWSTemplateFormatVersion: '2010-09-09'

Description: Simple S3 Bucket

Parameters:

  BucketName:
    Type: String
    Description: The name of the S3 Bucket to create

  TableName:
    Type: String
    Description: The name of the DynamoDB to create

Metadata:

  AWS::CloudFormation::Interface:
    ParameterLabels:
      BucketName:
        default: S3 Bucket Name

  AWS::CloudFormation::Interface:
    ParameterLabels:
      TableName:
        default: Dynamo DB instance Name

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Need to define a static BucketName due to a circular dependency with the AWS::SNS::TopicPolicy
      BucketName: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
            NoncurrentVersionExpirationInDays: 3
            Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref S3BucketLogs
        LogFilePrefix: !Sub '/logs/${BucketName}/'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: Object Storage
      VersioningConfiguration:
        Status: Enabled

  S3BucketLogs:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
            Transitions:
              -
                StorageClass: GLACIER
                TransitionInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: S3 Access Logs

  DynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "timestamp"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: !Ref TableName

  S3ListenExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['logs:*']
                Resource: 'arn:aws:logs:*:*:*'
  S3ListenFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import traceback
          import json
          def obj_iterate(obj, params):
              if isinstance(obj, dict):
                  for k in obj:
                      obj[k] = obj_iterate(obj[k], params)
              elif isinstance(obj, list):
                  for i, v in enumerate(obj):
                      obj[i] = obj_iterate(v, params)
              elif isinstance(obj, str):
                  if obj.startswith("#!PyPlate"):
                      params['output'] = None
                      exec(obj, params)
                      obj = params['output']
              return obj
          def handler(event, context):
              print(json.dumps(event))
              macro_response = {
                  "requestId": event["requestId"],
                  "status": "success"
              }
              try:
                  params = {
                      "params": event["templateParameterValues"],
                      "template": event["fragment"],
                      "account_id": event["accountId"],
                      "region": event["region"]
                  }
                  response = event["fragment"]
                  macro_response["fragment"] = obj_iterate(response, params)
              except Exception as e:
                  traceback.print_exc()
                  macro_response["status"] = "failure"
                  macro_response["errorMessage"] = str(e)
              return macro_response
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt S3ListenExecutionRole.Arn
  S3ListenFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt S3ListenFunction.Arn
      Principal: 'cloudformation.amazonaws.com'
  S3Listen:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: !Sub 'PyPlate'
      Description: Processes inline python in templates
      FunctionName: !GetAtt S3ListenFunction.Arn


Outputs:

  S3Bucket:
    Value: !Ref S3Bucket
    Description: S3 Bucket for receiving new readings

  DynamoDb:
    Value: !Ref DynamoDBTable
    Description: DB for object storage

